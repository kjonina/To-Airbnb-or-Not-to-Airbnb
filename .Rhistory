'Sligo' = 'Not Carlow',
'Wexford' = 'Not Carlow',
'Clare' = 'Not Carlow',
'Donegal' = 'Not Carlow',
'Meath' = 'Not Carlow',
'Westmeath' = 'Not Carlow',
'Mayo' = 'Not Carlow',
'Limerick' = 'Not Carlow',
'Kildare' = 'Not Carlow',
'Kerry'= 'Not Carlow',
'Louth' = 'Not Carlow',
'Longford' = 'Not Carlow',
'Leitrim' = 'Not Carlow',
'Kilkenny'= 'Not Carlow',
'Laois'= 'Not Carlow',
'Roscommon'= 'Not Carlow',
'Cavan' = 'Not Carlow',
'Waterford' = 'Not Carlow'))
# assigning factor to carlow variable
df$carlow <- as.factor(df$carlow)
unique(df$carlow)
# Creating a new variable which detects whether 'Student' is included in the name
df <- df %>%
select(everything()) %>%
mutate(
student_accomodation = case_when(
str_detect(name, "Student") ~ TRUE,
str_detect(name, "student") ~ TRUE,
str_detect(name, "STUDENT") ~ TRUE,
TRUE ~ FALSE))
# examining the count of student accomodation TRUE or FALSE
df %>%
select(student_accomodation) %>%
group_by(student_accomodation) %>%
summarise(count = n())
df <- df %>%
select(student_accomodation) %>%
mutate(term = if_else(minimum_nights <= 14, 'short-term lease', 'long-term lease'))
df <- df %>%
select(everything()) %>%
mutate(term = if_else(minimum_nights <= 14, 'short-term lease', 'long-term lease'))
df <- df %>%
select(everything()) %>%
mutate(term = if_else(minimum_nights <= 14, 'short-term lease', 'long-term lease'))
# assigning factor to term
df$term <- as.factor(df$term)
unique(df$term)
df <- df %>%
select(everything()) %>%
mutate(threshold_day_90 = if_else(availability_365 < 90, 'under-90', 'over-90'))
# assigning factor to threshold_day_90
df$threshold_day_90 <- as.factor(df$threshold_day_90)
unique(df$threshold_day_90)
df %>%
count(term) %>%
mutate(term = fct_reorder(term, n, .desc = TRUE)) %>%
plot_ly(x = ~county, y = ~n, color = ~term,
hoverinfo = "text",
text = ~paste("County:", county, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
count(term) %>%
mutate(term = fct_reorder(term, n, .desc = TRUE)) %>%
plot_ly(x = ~term, y = ~n, color = ~term,
hoverinfo = "text",
text = ~paste("County:", county, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
count(term) %>%
mutate(term = fct_reorder(term, n, .desc = TRUE)) %>%
plot_ly(x = ~term, y = ~n, color = ~term,
hoverinfo = "text",
text = ~paste("Term:", term, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
count(threshold_day_90) %>%
mutate(threshold_day_90 = fct_reorder(threshold_day_90, n, .desc = TRUE)) %>%
plot_ly(x = ~threshold_day_90, y = ~n, color = ~threshold_day_90,
hoverinfo = "text",
text = ~paste("Term:", term, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
count(threshold_day_90) %>%
mutate(threshold_day_90 = fct_reorder(threshold_day_90, n, .desc = TRUE)) %>%
plot_ly(x = ~threshold_day_90, y = ~n, color = ~threshold_day_90,
hoverinfo = "text",
text = ~paste("threshold_day_90:", threshold_day_90, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
count(county, city_status, term) %>%
mutate(term = fct_reorder(term, n, .desc = TRUE)) %>%
plot_ly(x = ~county, y = ~n, color = ~city_status,
hoverinfo = "text",
text = ~paste("Term:", term, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
count(city_status, term) %>%
mutate(term = fct_reorder(term, n, .desc = TRUE)) %>%
plot_ly(x = ~city_status, y = ~n, color = ~city_status,
hoverinfo = "text",
text = ~paste("city_status:", city_status, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
count(city_status, term) %>%
mutate(city_status = fct_reorder(city_status, n, .desc = TRUE)) %>%
plot_ly(x = ~city_status, y = ~n, color = ~city_status,
hoverinfo = "text",
text = ~paste("city_status:", city_status, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
group_by(city_status) %>%
count(term) %>%
mutate(city_status = fct_reorder(city_status, n, .desc = TRUE)) %>%
plot_ly(x = ~city_status, y = ~n, color = ~city_status,
hoverinfo = "text",
text = ~paste("city_status:", city_status, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
count(city_status, term) %>%
mutate(term = fct_reorder(term, n, .desc = TRUE)) %>%
plot_ly(x = ~city_status, y = ~n, color = ~city_status,
hoverinfo = "text",
text = ~paste("Term:", city_status, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
df %>%
count(term) %>%
mutate(term = fct_reorder(term, n, .desc = TRUE)) %>%
plot_ly(x = ~term, y = ~n, color = ~term,
hoverinfo = "text",
text = ~paste("Term:", term, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
p1 <- df %>%
count(term) %>%
mutate(term = fct_reorder(term, n, .desc = TRUE)) %>%
plot_ly(x = ~term, y = ~n, color = ~term,
hoverinfo = "text",
text = ~paste("Term:", term, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
p2 <- df %>%
plot_ly(x = ~city_status, y = ~price, color = ~term) %>%
add_boxplot(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(
xaxis = list(title = FALSE),
yaxis = list(title = "Price in Euro",
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff',
range = list(0, 450)),
title="AirBnB Listings of Shared Rooms",
boxmode = "group")
subplot(p1, p2, titleX = TRUE, titleY = TRUE) %>%
hide_legend()
p1 <- df %>%
count(term) %>%
mutate(term = fct_reorder(term, n, .desc = TRUE)) %>%
plot_ly(x = ~term, y = ~n, color = ~term,
hoverinfo = "text",
text = ~paste("Term:", term, "<br>", "Number of AirBnB Listings:", n)) %>%
add_bars(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of AirBnB Listings"),
title = "Number of AirBnB Listings per County")
p2 <- df %>%
plot_ly(x = ~term, y = ~price, color = ~city_status) %>%
add_boxplot(showlegend = FALSE, colors = c( "#FF9900","#565656")) %>%
layout(
xaxis = list(title = FALSE),
yaxis = list(title = "Price in Euro",
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff',
range = list(0, 450)),
title="AirBnB Listings of Shared Rooms",
boxmode = "group")
subplot(p1, p2, titleX = TRUE, titleY = TRUE) %>%
hide_legend()
df %>%
select(term, minimum_nights) %>%
filter(term == 'long-term lease') %>%
summarise(no_of_listings = n(),
min_price = min(price),
median_price = median(price),
mean_price = mean(price),
max_price = max(price),
min_nights = min(minimum_nights),
median_min_nights = median(minimum_nights),
mean_min_nights = mean(minimum_nights),
max_min_nights = max(minimum_nights))
df %>%
select(term, minimum_nights, price) %>%
filter(term == 'long-term lease') %>%
summarise(no_of_listings = n(),
min_price = min(price),
median_price = median(price),
mean_price = mean(price),
max_price = max(price),
min_nights = min(minimum_nights),
median_min_nights = median(minimum_nights),
mean_min_nights = mean(minimum_nights),
max_min_nights = max(minimum_nights))
df %>%
select(term, minimum_nights, price) %>%
group_by(term)
summarise(no_of_listings = n(),
min_price = min(price),
median_price = median(price),
mean_price = mean(price),
max_price = max(price),
min_nights = min(minimum_nights),
median_min_nights = median(minimum_nights),
mean_min_nights = mean(minimum_nights),
max_min_nights = max(minimum_nights))
df %>%
select(term, minimum_nights, price) %>%
group_by(term) %>%
summarise(no_of_listings = n(),
min_price = min(price),
median_price = median(price),
mean_price = mean(price),
max_price = max(price),
min_nights = min(minimum_nights),
median_min_nights = median(minimum_nights),
mean_min_nights = mean(minimum_nights),
max_min_nights = max(minimum_nights))
df %>%
select(city_status, term, minimum_nights, price) %>%
group_by(city_status, term) %>%
summarise(no_of_listings = n(),
min_price = min(price),
median_price = median(price),
mean_price = mean(price),
max_price = max(price),
min_nights = min(minimum_nights),
median_min_nights = median(minimum_nights),
mean_min_nights = mean(minimum_nights),
max_min_nights = max(minimum_nights))
df %>%
select(city_status, threshold_day_90, minimum_nights, price) %>%
group_by(city_status, threshold_day_90) %>%
summarise(no_of_listings = n(),
min_price = min(price),
median_price = median(price),
mean_price = mean(price),
max_price = max(price),
min_nights = min(minimum_nights),
median_min_nights = median(minimum_nights),
mean_min_nights = mean(minimum_nights),
max_min_nights = max(minimum_nights))
knitr::opts_chunk$set(echo = TRUE)
if (!require("stringr")) install.packages("stringr")
if (!require("dplyr")) install.packages("dplyr")
library(stringr)
library(dplyr)
# reading the csv
calendar_df =  read.csv('calendar.csv')
#check the class of calendar_df
class(calendar_df)
#check the column names for  calendar_df
colnames(calendar_df)
# examining the structure in calendar_df
str(calendar_df)
# examining the top 5 rows in calendar_df
head(calendar_df)
# examining summary of all numeric columns in calendar_df
summary(calendar_df)
# examining the column type
str(calendar_df)
# converting to datetime object
calendar_df[['date']] <- as.POSIXct(calendar_df[['date']],format = "%Y-%m-%d")
str(calendar_df)
# extracting month from the date
calendar_df[['month']] <- format(calendar_df[['date']],format = "%B")
# e3xamining unique months in the dataset
unique(calendar_df$month)
head(calendar_df)
# changing 'month' to factor
calendar_df$mmonth <- as.factor(calendar_df$month)
# changing  the order of factors
calendar_df$month <- factor(calendar_df$month, levels = c("January", "February", "March","April", "May", "June","July", "August", "September","October", "November", "December"))
#replacing '$' and '.00' with nothing
calendar$price <- str_replace(calendar_df$price, '$', '')
#replacing '$' and '.00' with nothing
calendar_df$price <- str_replace(calendar_df$price, '$', '')
calendar_df$price <- str_replace(calendar_df$price, '.00', '')
calendar_df$adjusted_price <- str_replace(calendar_df$adjusted_price, '$', '')
calendar_df$adjusted_price <- str_replace(calendar_df$adjusted_price, '.00', '')
unique(calendar_df$price)
#replacing '$' and '.00' with nothing
calendar_df$price <- str_replace(calendar_df$price, '$', '')
calendar_df$price <- str_replace(calendar_df$price, '.00', '')
calendar_df$adjusted_price <- str_replace(calendar_df$adjusted_price, '$', '')
calendar_df$adjusted_price <- str_replace(calendar_df$adjusted_price, '.00', '')
unique(calendar_df$price)
unique(calendar_df$adjusted_price)
#replacing '$' and '.00' with nothing
calendar_df$price <- gsub('^.|.^', '', calendar_df$price)
unique(calendar_df$adjusted_price)
str(calendar_df$adjusted_price)
#replacing '$' and '.00' with nothing
calendar_df$price <- substring(calendar_df$price, 2)
#replacing '$' and '.00' with nothing
calendar_df$price <- substring(calendar_df$price, 2)
unique(calendar_df$adjusted_price)
unique(calendar_df$adjusted_price)
unique(calendar_df$price)
knitr::opts_chunk$set(echo = TRUE)
if (!require("stringr")) install.packages("stringr")
if (!require("dplyr")) install.packages("dplyr")
library(stringr)
library(dplyr)
# reading the csv
calendar_df =  read.csv('calendar.csv')
#check the class of calendar_df
class(calendar_df)
#check the column names for  calendar_df
colnames(calendar_df)
# examining the structure in calendar_df
str(calendar_df)
# examining the top 5 rows in calendar_df
head(calendar_df)
# examining summary of all numeric columns in calendar_df
summary(calendar_df)
# examining the column type
str(calendar_df)
# converting to datetime object
calendar_df[['date']] <- as.POSIXct(calendar_df[['date']],format = "%Y-%m-%d")
str(calendar_df)
# extracting month from the date
calendar_df[['month']] <- format(calendar_df[['date']],format = "%B")
# e3xamining unique months in the dataset
unique(calendar_df$month)
head(calendar_df)
# changing 'month' to factor
calendar_df$mmonth <- as.factor(calendar_df$month)
# changing  the order of factors
calendar_df$month <- factor(calendar_df$month, levels = c("January", "February", "March","April", "May", "June","July", "August", "September","October", "November", "December"))
#replacing '$' and '.00' with nothing
calendar_df$price <- substring(calendar_df$price, 1)
calendar_df$price <- str_replace(calendar_df$price, '.00', '')
#replacing '$' and '.00' with nothing
calendar_df$adjusted_price <- substring(calendar_df$adjusted_price, 1)
calendar_df$adjusted_price <- str_replace(calendar_df$adjusted_price, '.00', '')
unique(calendar_df$price)
#replacing '$' and '.00' with nothing
calendar_df$price <- substring(calendar_df$price, 2)
#calendar_df$price <- str_replace(calendar_df$price, '.00', '')
#replacing '$' and '.00' with nothing
calendar_df$adjusted_price <- substring(calendar_df$adjusted_price, 2)
#calendar_df$adjusted_price <- str_replace(calendar_df$adjusted_price, '.00', '')
unique(calendar_df$price)
knitr::opts_chunk$set(echo = TRUE)
if (!require("stringr")) install.packages("stringr")
if (!require("dplyr")) install.packages("dplyr")
library(stringr)
library(dplyr)
# reading the csv
calendar_df =  read.csv('calendar.csv')
#check the class of calendar_df
class(calendar_df)
#check the column names for  calendar_df
colnames(calendar_df)
# examining the structure in calendar_df
str(calendar_df)
# examining the top 5 rows in calendar_df
head(calendar_df)
# examining summary of all numeric columns in calendar_df
summary(calendar_df)
# examining the column type
str(calendar_df)
# converting to datetime object
calendar_df[['date']] <- as.POSIXct(calendar_df[['date']],format = "%Y-%m-%d")
str(calendar_df)
# extracting month from the date
calendar_df[['month']] <- format(calendar_df[['date']],format = "%B")
# e3xamining unique months in the dataset
unique(calendar_df$month)
head(calendar_df)
# changing 'month' to factor
calendar_df$mmonth <- as.factor(calendar_df$month)
# changing  the order of factors
calendar_df$month <- factor(calendar_df$month, levels = c("January", "February", "March","April", "May", "June","July", "August", "September","October", "November", "December"))
#replacing '$' and '.00' with nothing
calendar_df$price <- substring(calendar_df$price, 2)
calendar_df$price <- substring(calendar_df$price, -3)
#replacing '$' and '.00' with nothing
calendar_df$adjusted_price <- substring(calendar_df$adjusted_price, 2)
calendar_df$adjusted_price <- substring(calendar_df$adjusted_price, -3)
unique(calendar_df$price)
#replacing '$' and '.00' with nothing
#calendar_df$price <- substring(calendar_df$price, 2)
calendar_df$price <- substring(calendar_df$price, end = -3)
#replacing '$' and '.00' with nothing
#calendar_df$price <- substring(calendar_df$price, 2)
calendar_df$price <- str_sub(calendar_df$price, end = -3)
#replacing '$' and '.00' with nothing
#calendar_df$adjusted_price <- substring(calendar_df$adjusted_price, 2)
calendar_df$adjusted_price <- str_sub(calendar_df$adjusted_price, end=-3)
unique(calendar_df$price)
knitr::opts_chunk$set(echo = TRUE)
if (!require("stringr")) install.packages("stringr")
if (!require("dplyr")) install.packages("dplyr")
library(stringr)
library(dplyr)
# reading the csv
calendar_df =  read.csv('calendar.csv')
#check the class of calendar_df
class(calendar_df)
#check the column names for  calendar_df
colnames(calendar_df)
# examining the structure in calendar_df
str(calendar_df)
# examining the top 5 rows in calendar_df
head(calendar_df)
# examining summary of all numeric columns in calendar_df
summary(calendar_df)
# examining the column type
str(calendar_df)
# converting to datetime object
calendar_df[['date']] <- as.POSIXct(calendar_df[['date']],format = "%Y-%m-%d")
str(calendar_df)
# extracting month from the date
calendar_df[['month']] <- format(calendar_df[['date']],format = "%B")
# e3xamining unique months in the dataset
unique(calendar_df$month)
head(calendar_df)
# changing 'month' to factor
calendar_df$mmonth <- as.factor(calendar_df$month)
# changing  the order of factors
calendar_df$month <- factor(calendar_df$month, levels = c("January", "February", "March","April", "May", "June","July", "August", "September","October", "November", "December"))
#replacing '$' and '.00' with nothing
calendar_df$price <- substring(calendar_df$price, 2)
calendar_df$price <- str_sub(calendar_df$price, end = -4)
#replacing '$' and '.00' with nothing
calendar_df$adjusted_price <- substring(calendar_df$adjusted_price, 2)
calendar_df$adjusted_price <- str_sub(calendar_df$adjusted_price, end=- 4)
unique(calendar_df$price)
calendar_df$price <- strtoi(calendar_df$price)
calendar_df$adjusted_price <- strtoi(calendar_df$adjusted_pric)
# Earlist date
min(calendar_df$date)
# Latest date
max(calendar_df$date)
str(calendar_df)
summarise_df <- calendar_df %>%
select(listing_id, month, available) %>%
filter(available=='t') %>%
group_by(listing_id, month) %>%
summarise(count=n(),
max_price = max(price),
mean_price = mean(price),
min_price = min(price))
summarise_df <- calendar_df %>%
select(listing_id, month, available) %>%
filter(available=='t') %>%
group_by(listing_id, month) %>%
summarise(count=n())
summarise_df <- calendar_df %>%
select(listing_id, month, available, price) %>%
filter(available=='t') %>%
group_by(listing_id, month) %>%
summarise(count=n(),
max_price = max(price),
mean_price = mean(price),
min_price = min(price))
head(summarise_df)
head(summarise_df)
summarise_df <- calendar_df %>%
select(listing_id, month, available, price) %>%
filter(available=='t') %>%
group_by(listing_id, month) %>%
summarise(count=n(),
min_price = min(price),
mean_price = mean(price),
max_price = max(price))
head(summarise_df)
write.csv(summarise_df,"summarise_df.csv", row.names = TRUE)
