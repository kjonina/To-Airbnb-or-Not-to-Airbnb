df$county <- str_replace(df$county, ' City And', '')
# neighbourhood group in Dublin
df$county <- str_replace(df$county, 'Dún Laoghaire-Rathdown', 'Dublin')
df$county <- str_replace(df$county, 'Fingal', 'Dublin')
df$county <- str_replace(df$county, 'South Dublin', 'Dublin')
# assigning factor to country
df$county <- as.factor(df$county)
unique(df$county)
print('Number of unique id: ')
print(n_distinct(df$id))
print('Number of rows: ')
print(nrow(df))
df <- df %>%
mutate(threshold_day_90 = if_else(availability_365 < 90, 'under-90', 'over-90'))
# assigning factor to threshold_day_90
df$threshold_day_90 <- as.factor(df$threshold_day_90)
# examining the count of threshold_day_90
df %>%
select(threshold_day_90) %>%
group_by(threshold_day_90) %>%
summarise(count = n())
# personal preference
df$room_type <- str_replace(df$room_type, 'Entire home/apt', 'Entire rental unit')
df %>%
select(room_type) %>%
group_by(room_type) %>%
summarise(count = n()) %>%
arrange(desc(count))
# removing hotel
df <-  df %>%
filter(!(room_type == 'Hotel room' | room_type == 'Shared room'))
# declaring column as a factor
df$room_type <- as.factor(df$room_type)
# examining room type available in Room Type
unique(df$room_type)
DIRECTORY = "data_2024"
# specifying the path to the CSV file
file_path <- here(DIRECTORY, "summarise_df.csv")
# Read the CSV file
summarise_df <- read_csv(file_path)
summarise_df <- summarise_df%>%
arrange(listing_id)
summarise_df$listing_id <- as.factor(summarise_df$listing_id)
#check the class of summarise_df
class(summarise_df)
#check the column names for  summarise_df
colnames(summarise_df)
# examining the structure in summarise_df
str(summarise_df)
# examining the top 5 rows in summarise_df
head(summarise_df)
# examining summary of all numeric columns in summarise_df
summary(summarise_df)
print('HOw many listings have missing availability?')
df %>%
filter((is.na(availability_365)) | (availability_365 ==0))  %>%
summarise(n = n_distinct(id)) %>%
pull()
print('HOw many listings have missing price?')
df %>%
filter((is.na(price)) | (price ==0))  %>%
summarise(n = n_distinct(id)) %>%
pull()
# CREATED A ORIGIAL so I dont have to rerun code from the top and wait for HOURS....
original_df <- df
print('If we drop listings all missing availability and price?')
df %>%
filter(!(availability_365 ==0))  %>%
filter(!(is.na(price)) |!(price ==0))   %>%
summarise(n = n_distinct(id)) %>%
pull()
no_missing_values_original_df <- df %>%
filter(!(availability_365 ==0))  %>%
filter(!(is.na(price)) |!(price ==0))
no_missing_values_original_df
# specifying the path to the CSV file
file_path <- here(DIRECTORY, "available_nights_df.csv")
# Read the CSV file
available_nights_df <- read_csv(file_path)
available_nights_df <- available_nights_df%>%
arrange(listing_id)
available_nights_df$listing_id <- as.factor(available_nights_df$listing_id)
#check the class of available_nights_df
class(available_nights_df)
#check the column names for  available_nights_df
colnames(available_nights_df)
# examining the structure in available_nights_df
str(available_nights_df)
# examining the top 5 rows in available_nights_df
head(available_nights_df)
# examining summary of all numeric columns in available_nights_df
summary(available_nights_df)
total_nights_available = summarise_df %>%
group_by(listing_id) %>%
summarise(total_nights_available = sum(count),
total_nights_available_price = mean(mean_price))
# Merging based on different column names
merged_df <- merge(df, total_nights_available, by.x = "id", by.y = "listing_id")
merged_df
# Merging based on different column names
df <- df%>%
mutate(sub_id = substr(id, 1, 7))
sub_merged_df <- merge(df, total_nights_available, by.x = "sub_id", by.y = "listing_id")
sub_merged_df
sum(is.na(merged_df$availability_365))
sum(is.na(merged_df$price))
sum(is.na(merged_df$total_nights_available))
sum(is.na(merged_df$total_nights_available_price))
merged_df %>%
select(availability_365, total_nights_available) %>%
mutate(availability_does_not_match_between_merged_datasets = availability_365 == total_nights_available) %>%
group_by(availability_does_not_match_between_merged_datasets) %>%
summarise(n = n())
#
merged_df %>%
select(availability_365, total_nights_available) %>%
mutate(availability_does_not_match_between_merged_datasets = availability_365 ==total_nights_available,
diff =  availability_365  - total_nights_available) %>%
filter(availability_does_not_match_between_merged_datasets == FALSE) %>%
summary()
merged_df %>%
select(price, total_nights_available_price) %>%
mutate(boolena = price == total_nights_available_price) %>%
group_by(boolena) %>%
summarise(n = n())
merged_df %>%
select(price, total_nights_available_price) %>%
mutate(price_does_not_match_between_merged_datasets = total_nights_available_price ==price,
diff = total_nights_available_price - price ) %>%
filter(price_does_not_match_between_merged_datasets == FALSE)  %>%
summary()
print(summary(merged_df$price))
print(summary(merged_df$total_nights_available_price) )
merged_df %>%
select(id, availability_365, total_nights_available, price, total_nights_available_price) %>%
mutate(price_does_not_match_between_merged_datasets = total_nights_available_price ==price) %>%
filter(is.na(price_does_not_match_between_merged_datasets))
# Rename column A to B
df <- merged_df %>%
######
# Dealing with Availability
######
# Dropping the availability_365 (from df because it had more missing values than the summarise_df)
select(-availability_365) %>%
rename(availability_365 = total_nights_available) %>%
######
# dealing with price combining
######
select(-price) %>%
rename(price = total_nights_available_price)
# 62 rows have no price
#  filter(!is.na(price))
print(summary(merged_df$price))
print(summary(merged_df$availability_365))
merged_df <-  merged_df %>%
# 264 rows have no price
filter(!(is.na(price)) | (is.na(availability_365)))
merged_df
print(summary(df$price))
df <- df %>%
mutate(occupancy_70_per = round(availability_365* 0.7))
df <- df %>%
mutate(airbnb_potential_annual_income = price*occupancy_70_per)
summary(df$airbnb_potential_annual_income)
df %>%
plot_ly(x = ~airbnb_potential_annual_income) %>%
add_histogram() %>%
layout(xaxis = list(title = "Total Income"),
yaxis = list(title = "Number of Observations"),
title = "Histogram of Total Income")
# specifying the path to the CSV file
file_path <- here(DIRECTORY, "rent_pressure_zones.csv")
# Read the CSV file
rpz_df <- read_csv(file_path, show_col_types = FALSE)
#check the class of rpz_df
class(rpz_df)
#check the column names for  rpz_df
colnames(rpz_df)
# examining the structure in rpz_df
str(rpz_df)
# examining the top 5 rows in rpz_df
head(rpz_df)
# examining summary of all numeric columns in rpz_df
summary(rpz_df)
unique_neighbourhoods <- unique(rpz_df$neighbourhood)
unique_neighbourhoods_list <- as.list(unique_neighbourhoods)
unique(rpz_df$neighbourhood)
# Creating a new variable
# Manually assessing whether it is TRUE or FALSE
# the list was taken from 'neighbourhood' in 'rpz_df' dataset
df <- df %>%
mutate(
rent_pressure_zone = case_when(
str_detect(council, 'Cork City Council') ~ TRUE,
str_detect(council, 'Dublin City Council') ~ TRUE,
str_detect(council, 'Dún Laoghaire-Rathdown County Council') ~ TRUE,
str_detect(council, 'Fingal County Council') ~ TRUE,
str_detect(council, 'South Dublin County Council') ~ TRUE,
str_detect(council, 'Kildare County Council') ~ TRUE,
str_detect(lea, 'Ballincollig–Carrigaline LEA') ~ TRUE,
str_detect(lea, 'Galway City Central LEA') ~ TRUE,
str_detect(lea, 'Galway City West LEA') ~ TRUE,
str_detect(lea, 'Galway City East LEA') ~ TRUE,
str_detect(lea, 'Drogheda LEA') ~ TRUE,
str_detect(lea, 'Drogheda Urban LEA') ~ TRUE,
str_detect(lea, 'Drogheda Rural LEA') ~ TRUE,
str_detect(lea, 'Celbridge-Leixlip LEA') ~ TRUE,
str_detect(lea, 'Naas LEA') ~ TRUE,
str_detect(lea, 'Newbridge LEA') ~ TRUE,
str_detect(lea, 'Ashbourne LEA') ~ TRUE,
str_detect(lea, 'Laytown-Bettystown LEA') ~ TRUE,
str_detect(lea, 'Ratoath LEA') ~ TRUE,
str_detect(lea, 'Bray West LEA') ~ TRUE,
str_detect(lea, 'Bray East LEA') ~ TRUE,
str_detect(lea, 'Wicklow LEA') ~ TRUE,
str_detect(lea, 'Cobh LEA') ~ TRUE,
str_detect(lea, 'Maynooth LEA') ~ TRUE,
str_detect(lea, 'Drogheda LEA') ~ TRUE,
str_detect(lea, 'Greystones LEA') ~ TRUE,
str_detect(lea, 'Limerick City East LEA') ~ TRUE,
str_detect(lea, 'Navan LEA') ~ TRUE,
str_detect(lea, 'Fermoy LEA') ~ TRUE,
str_detect(lea, 'Midleton LEA') ~ TRUE,
str_detect(lea, 'Athenry-Oranmore LEA') ~ TRUE,
str_detect(lea, 'Gort-Kinvara LEA') ~ TRUE,
str_detect(lea, 'Kilkenny LEA') ~ TRUE,
str_detect(lea, 'Graiguecullen-Portarlington LEA') ~ TRUE,
str_detect(lea, 'Portlaoise LEA') ~ TRUE,
str_detect(lea, 'Limerick City North LEA') ~ TRUE,
str_detect(lea, 'Limerick City West LEA') ~ TRUE,
str_detect(lea, 'Ardee LEA') ~ TRUE,
str_detect(lea, 'Dundalk-Carlingford LEA') ~ TRUE,
str_detect(lea, 'Dundalk South LEA') ~ TRUE,
str_detect(lea, 'Kells LEA') ~ TRUE,
str_detect(lea, 'Trim LEA') ~ TRUE,
str_detect(lea, 'Waterford City East LEA') ~ TRUE,
str_detect(lea, 'Waterford City South LEA') ~ TRUE,
str_detect(lea, 'Athlone LEA') ~ TRUE,
str_detect(lea, 'Gorey LEA') ~ TRUE,
str_detect(lea, 'Arklow LEA') ~ TRUE,
str_detect(lea, 'Carlow LEA') ~ TRUE,
str_detect(lea, 'Macroom LEA') ~ TRUE,
str_detect(lea, 'Cobh LEA') ~ TRUE,
str_detect(lea, 'Piltown LEA') ~ TRUE,
str_detect(lea, 'Sligo-Strandhill LEA') ~ TRUE,
str_detect(lea, 'Baltinglass LEA') ~ TRUE,
str_detect(lea, 'Mallow LEA') ~ TRUE,
str_detect(lea, 'Killarney LEA') ~ TRUE,
str_detect(lea, 'Athy LEA') ~ TRUE,
str_detect(lea, 'Tullamore LEA') ~ TRUE,
str_detect(lea, 'Mullingar LEA') ~ TRUE,
str_detect(lea, 'Bandon-Kinsale LEA') ~ TRUE,
str_detect(lea, 'Westport LEA') ~ TRUE,
str_detect(lea, 'Shannon LEA') ~ TRUE,
str_detect(lea, 'Ennis LEA, Co. Clare') ~ TRUE,
str_detect(county, 'Kilkenny') ~ TRUE,
str_detect(county, 'Limerick') ~ TRUE,
str_detect(county, 'Waterford') ~ TRUE,
str_detect(county, 'Westmeath') ~ TRUE,
TRUE ~ FALSE))
# changing TRUE to 'RPZ' (RTZ)
df$rent_pressure_zone <- str_replace(df$rent_pressure_zone, 'TRUE', 'RPZ')
# changing False to 'Non-RPZ' (Non RTZ)
df$rent_pressure_zone <- str_replace(df$rent_pressure_zone, 'FALSE', 'Non-RPZ')
# assigning factor to rent_pressure_zone  variable
df$rent_pressure_zone <- as.factor(df$rent_pressure_zone)
unique(df$rent_pressure_zone)
# examining the count of rent_pressure_zone TRUE or FALSE
df %>%
select(rent_pressure_zone) %>%
group_by(rent_pressure_zone) %>%
summarise(count = n())
# specifying the path to the CSV file
file_path <- here(DIRECTORY, "rent_in_ireland.csv")
# Read the CSV file
rent_df <- read_csv(file_path)
#check the class of rent_df
class(rent_df)
#check the column names for  rent_df
colnames(rent_df)
# examining the structure in rent_df
str(rent_df)
# examining the top 5 rows in rent_df
head(rent_df)
# examining summary of all numeric columns in rent_df
summary(rent_df)
unique(rent_df$county_city)
unique(df$council)
df %>%
filter(county =='Limerick') %>%
group_by(county, council, lea) %>%
summarise(n = n())
# Applying case_when logic
df <- df %>%
mutate(
rent_council_city = case_when(
lea == 'Tramore-Waterford City West LEA' ~ 'Waterford City',
lea == 'Waterford City East LEA' ~ 'Waterford City',
lea == 'Waterford City South LEA' ~ 'Waterford City',
lea == 'Limerick City East LEA' ~ 'Limerick City',
lea == 'Limerick City North LEA' ~ 'Limerick City',
lea == 'Limerick City West LEA' ~ 'Limerick City',
TRUE ~ council
)
)
df$rent_council_city <- str_replace(df$rent_council_city, ' County Council', '')
df$rent_council_city <- str_replace(df$rent_council_city, ' City And', '')
df$rent_council_city <- str_replace(df$rent_council_city, ' Council', '')
df$rent_council_city <- str_replace(df$rent_council_city, 'Dún Laoghaire-Rathdown', 'Dublin City')
df$rent_council_city <- str_replace(df$rent_council_city, 'South Dublin', 'Dublin City')
df$rent_council_city <- str_replace(df$rent_council_city, 'Fingal', 'Dublin City')
unique(df$rent_council_city)
pre_merge_nrow <- nrow(df)
pre_merge_n_distinct <- n_distinct(df$id)
print('Number of unique id: ')
print(pre_merge_n_distinct)
print('Number of rows: ')
print(pre_merge_nrow)
# Print unique values from both lists
print('RENT COUNCIL CITY')
print(unique(df$rent_council_city))
print('RENT DF')
print(unique(rent_df$county_city))
rent_council_city_list <-  as.list(df$rent_council_city)
rent_df_list <- as.list(rent_df$county_city)
# Find elements in rent_council_city that are not in rent_df
not_in_rent_df <- setdiff(rent_council_city_list, rent_df_list)
print('Elements in RENT COUNCIL CITY not in RENT DF:')
print(not_in_rent_df)
# Find elements in rent_df that are not in rent_council_city
not_in_rent_council_city <- setdiff(rent_df_list, rent_council_city_list)
print('Elements in RENT DF not in RENT COUNCIL CITY:')
print(not_in_rent_council_city)
# Datasets 'df' and 'rent_df' were merged on column 'county_city'.
df <- merge(df, rent_df, by.x = "rent_council_city", by.y = "county_city")
df %>%
filter(is.na(rent_council_city))
# Checking we did not drop any rows during the merge!
post_merge_nrow <- nrow(df)
post_merge_n_distinct <- n_distinct(df$id)
print('Are the number of rows pre- and post- merge the same? ')
pre_merge_nrow == post_merge_nrow
pre_merge_n_distinct == post_merge_n_distinct
# if the property is 'Entire rental unit'. then multiply rent_potential_annual_income_per_month by 12 (months) and divide by 365 (days)
# otherwise ('Private room' or 'Shared room') multiply rent_potential_annual_income_per_month by 12 (months), divide by 365 (days) and divide by 3 (rooms in the house)
df <- df %>%
mutate(rent_potential_annual_income_per_day = if_else(room_type == 'Entire rental unit', (rent_price_per_month*12)/365, ((rent_price_per_month*12)/365)/3))
# if the property is 'Entire rental unit'. then multiply rent_potential_annual_income_per_month by 12 (months)
# otherwise ('Private room' or 'Shared room') multiply rent_potential_annual_income_per_month by 12 (months) and divide by 3 (rooms in the house)
df <- df %>%
mutate(rent_potential_annual_income = if_else(room_type == 'Entire rental unit', rent_price_per_month * 12, (rent_price_per_month*12)/3))
# creating a new variable to state whether the property should be rented or on AirBnB
df <- df %>%
mutate(best_choice_airbnb_or_rent_per_day = if_else(price >= rent_potential_annual_income_per_day, 'AirBnB', 'Rent'))
# assigning factor to per_day_rent_AirBnB
df$best_choice_airbnb_or_rent_per_day <- as.factor(df$best_choice_airbnb_or_rent_per_day)
# examining the count of per_day_rent_AirBnB
df %>%
select(best_choice_airbnb_or_rent_per_day) %>%
group_by(best_choice_airbnb_or_rent_per_day) %>%
summarise(count = n())
# creating a new variable to state whether the property should be rented or on AirBnB
df <- df %>%
mutate(best_choice_airbnb_or_rent_per_year = if_else(airbnb_potential_annual_income >= rent_potential_annual_income, 'AirBnB', 'Rent'))
# assigning factor to best_choice_airbnb_or_rent_per_year
df$best_choice_airbnb_or_rent_per_year <- as.factor(df$best_choice_airbnb_or_rent_per_year)
# examining the count of per_day_rent_AirBnB
df %>%
select(best_choice_airbnb_or_rent_per_year) %>%
group_by(best_choice_airbnb_or_rent_per_year) %>%
summarise(count = n())
# examining the count of per_day_rent_AirBnB
df %>%
select(id, county,room_type, availability_365, price, airbnb_potential_annual_income, #rent_price_per_month,
rent_potential_annual_income, best_choice_airbnb_or_rent_per_year #,annual_diff_rent_minus_Airbnb
)  %>%
filter(is.na(best_choice_airbnb_or_rent_per_year))
# If POSITIVE, then AIRBNB brings more income
# If NEGATIVE, then RENT brings more income
df <- df %>%
mutate(annual_diff_rent_minus_Airbnb = airbnb_potential_annual_income -  rent_potential_annual_income)
df <- df %>%
mutate(planning_permission = if_else((room_type == 'Entire rental unit' & threshold_day_90 == 'over-90' & rent_pressure_zone =='RPZ'), 'Planning Required', 'Not Required'))
# examining the count of planning_permission
df %>%
select(planning_permission) %>%
group_by(planning_permission) %>%
summarise(count = n())
# Assuming sum_df is your dataset with availability_365 column
df <- df %>%
mutate(month_category = case_when(
availability_365 <= 30 ~ "1 month",
availability_365 <= 61 ~ "2 months",
availability_365 <= 91 ~ "3 months",
availability_365 <= 122 ~ "4 months",
availability_365 <= 152 ~ "5 months",
availability_365 <= 183 ~ "6 months",
availability_365 <= 213 ~ "7 months",
availability_365 <= 244 ~ "8 months",
availability_365 <= 274 ~ "9 months",
availability_365 <= 305 ~ "10 months",
availability_365 <= 335 ~ "11 months",
availability_365 <= 365 ~ "12 months",
TRUE ~ "More than 12 months"  # Covering cases beyond 1 year (365 days)
))
# changing  the order of factors
df$month_category <- factor(df$month_category, levels = c("1 month",
"2 months",
"3 months",
"4 months",
"5 months",
"6 months",
"7 months",
"8 months",
"9 months",
"10 months",
"11 months",
"12 months",
"More than 12 months"
))
# Print the first few rows to check
head(df)
# merging the dataset together
large_df<- merge(df, summarise_df, by.x = "id", by.y = "listing_id")
names(large_df)
# dropping irrelevant columns
drop = c("id","host_id", "month", "count", "county", "room_type","term",
"availability_365", "county" ,
"rent_price_per_month" ,
"rent_potential_annual_income_per_day",
"rent_potential_annual_income",
"best_choice_airbnb_or_rent_per_day","best_choice_airbnb_or_rent_per_year",
"annual_diff_rent_minus_Airbnb","rent_pressure_zone", "threshold_day_90", "planning_permission", "month_category"
)
large_df <- large_df[names(large_df) %in% drop]
names(df)
str(large_df)
nrow(large_df)
ncol(large_df)
head(large_df)
summary(df)
nrow(df)
ncol(df)
df %>%
select(id, county,room_type, availability_365, price, airbnb_potential_annual_income, #rent_price_per_month,
rent_potential_annual_income, best_choice_airbnb_or_rent_per_year,annual_diff_rent_minus_Airbnb)
# Define the file path using here
file_path <- here(DIRECTORY, "airbnb_final_df_2024.csv")
# Save the dataframe as a CSV file
#write.csv(df, file = file_path, row.names = FALSE)
###################
# Define the file path using here
file_path <- here(DIRECTORY, "airbnb_large_df_2024.csv")
# Save the dataframe as a CSV file
#write.csv(large_df, file = file_path)
#RPZ or Non-RPZ
pressure_colors = c( "#316395", "#D62728")
# creating a map of Ireland with AirBnB listings in RTZ differentiated
g <- list(
scope = 'europe',
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5,
resolution = 50,
lonaxis = list(range = c(-12, -5)),
lataxis = list(range = c(52, 55))
)
unique_id_df <- df %>%
group_by(id, rent_pressure_zone,
lea, council, county, room_type, latitude, longitude) %>%
summarise(price = mean(price))
fig <- plot_geo(df, lat = ~latitude, lon = ~longitude, color = ~rent_pressure_zone)
fig <- fig %>% add_markers(marker = list(opacity = 0.2), showlegend=FALSE, colors = pressure_colors,
hovertemplate = ~paste("LEA:", lea, "<br>",
"Council:", council, "<br>",
"Price (in €):", price, "<br>",
"County:", county, "<br>",
"Room Type", room_type, "<br>",
"RTZ", rent_pressure_zone, "<br>"))
fig <- fig %>% layout(
title = 'Which AirBnB listings are in the RTZs?', geo = g)
fig
knitr::opts_chunk$set(echo = TRUE)
unique_id_df <- df %>%
group_by(id, rent_pressure_zone,
lea, council, county, room_type, latitude, longitude) %>%
summarise(price = mean(price))
fig <- plot_geo(df, lat = ~latitude, lon = ~longitude, color = ~rent_pressure_zone)
fig <- fig %>% add_markers(marker = list(opacity = 0.2), showlegend=FALSE, colors = pressure_colors,
hovertemplate = ~paste("LEA:", lea, "<br>",
"Council:", council, "<br>",
"Price (in €):", price, "<br>",
"County:", county, "<br>",
"Room Type", room_type, "<br>",
"RTZ", rent_pressure_zone, "<br>"))
fig <- fig %>% layout(
title = 'Which AirBnB listings are in the RTZs?', geo = g)
fig
df
df
# Define the file path using here
file_path <- here(DIRECTORY, "airbnb_final_df_2024.csv")
# Save the dataframe as a CSV file
write.csv(df, file = file_path, row.names = FALSE)
###################
# Define the file path using here
file_path <- here(DIRECTORY, "airbnb_large_df_2024.csv")
# Save the dataframe as a CSV file
write.csv(large_df, file = file_path)
