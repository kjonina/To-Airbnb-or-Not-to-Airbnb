knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(stringr)
library(knitr)
library(here)
library(plotly)
library(forcats)
library(crosstalk)
#check the class of calendar_df
class(calendar_df)
knitr::opts_chunk$set(echo = TRUE)
head(calendar_df)
# e3xamining unique months in the dataset
unique(calendar_df$month)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(stringr)
library(knitr)
library(here)
library(plotly)
library(forcats)
library(crosstalk)
#check the class of calendar_df
class(calendar_df)
DIRECTORY = "data_2024"
# specifying the path to the CSV file
file_path <- here(DIRECTORY, "calendar.csv")
# Read the CSV file
calendar_df <- read_csv(file_path)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(stringr)
library(knitr)
library(here)
library(plotly)
library(forcats)
library(crosstalk)
DIRECTORY = "data_2024"
# specifying the path to the CSV file
file_path <- here(DIRECTORY, "calendar.csv")
# Read the CSV file
calendar_df <- read_csv(file_path)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(stringr)
library(knitr)
library(plotly)
library(forcats)
library(crosstalk)
library(here)
library(camcorder)
DIRECTORY = "data_2024"
# specifying the path to the CSV file
file_path <- here(DIRECTORY, "calendar.csv")
# Read the CSV file
calendar_df <- read_csv(file_path)
#check the class of calendar_df
class(calendar_df)
#
nrow(calendar_df)
ncol(calendar_df)
colnames(calendar_df)
max(calendar_df$date)
min(calendar_df$date)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(stringr)
library(knitr)
library(plotly)
library(forcats)
library(crosstalk)
library(here)
library(camcorder)
#check the class of calendar_df
class(calendar_df)
# Make sure to change this so that you can rerun code with 2021 data
DIRECTORY = "data_2024"
# specifying the path to the CSV file
file_path <- here(DIRECTORY, "calendar.csv")
# Read the CSV file
calendar_df <- read_csv(file_path)
#check the class of calendar_df
class(calendar_df)
#check the class of calendar_df
class(calendar_df)
#
nrow(calendar_df)
ncol(calendar_df)
colnames(calendar_df)
#check the column names for  calendar_df
colnames(calendar_df)
# examining the structure in calendar_df
str(calendar_df)
# examining the top 5 rows in calendar_df
head(calendar_df)
# examining summary of all numeric columns in calendar_df
summary(calendar_df)
# examining the column type
str(calendar_df)
# converting to datetime object
calendar_df[['date']] <- as.POSIXct(calendar_df[['date']],format = "%Y-%m-%d")
str(calendar_df)
# extracting month from the date
calendar_df[['month']] <- format(calendar_df[['date']],format = "%B %Y")
# e3xamining unique months in the dataset
unique(calendar_df$month)
head(calendar_df)
min(calendar_df$date)
max(calendar_df$date)
# changing 'month' to factor
calendar_df$month <- as.factor(calendar_df$month)
# changing  the order of factors
calendar_df$month <- factor(calendar_df$month, levels = c("July 2024", "August 2024", "September 2024","October 2024", "November 2024", "December 2024", "January 2025", "February 2025", "March 2025","April 2025", "May 2025", "June 2025",))
knitr::opts_chunk$set(echo = TRUE)
min(calendar_df$min)
min(calendar_df$date)
calendar_df %>%
select(month, available, price) %>%
# dropping June 2024 because it will skew the analysis
filter( (available == 't') & ('month' == 'June 2024')) %>%
group_by(listing_id, month) %>%
summarise(count=n(),
min_price = min(price),
mean_price = mean(price),
median_price = median(price),
max_price = max(price))
calendar_df %>%
select(month, available, price) %>%
# dropping June 2024 because it will skew the analysis
filter( (available == 't') & ('month' == 'June 2024')) %>%
group_by( month) %>%
summarise(count=n(),
min_price = min(price),
mean_price = mean(price),
median_price = median(price),
max_price = max(price))
calendar_df %>%
select(month, available, price) %>%
# dropping June 2024 because it will skew the analysis
filter( (available == 't') & (month == 'June 2024')) %>%
group_by( month) %>%
summarise(count=n(),
min_price = min(price),
mean_price = mean(price),
median_price = median(price),
max_price = max(price))
calendar_df
# examining the structure in calendar_df
str(calendar_df)
calendar_df %>%
select(month, available, price) %>%
# dropping June 2024 because it will skew the analysis
filter( (available == TRUE) & (month == 'June 2024')) %>%
group_by( month) %>%
summarise(count=n(),
min_price = min(price),
mean_price = mean(price),
median_price = median(price),
max_price = max(price))
min(calendar_df$date)
calendar_df %>%
select(listing_id, month, available, price) %>%
# dropping June 2024 because it will skew the analysis
filter( (available == TRUE) & (month == 'June 2024')) %>%
group_by(listing_id,  month) %>%
summarise(count=n(),
min_price = min(price),
mean_price = mean(price),
median_price = median(price),
max_price = max(price))
